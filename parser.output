Terminals unused in grammar

   BBNUM


Grammar

    0 $accept: Prog $end

    1 Prog: Global Proclist

    2 Global: %empty
    3       | Global D
    4       | Global func_decl

    5 Proclist: Proc
    6         | Proclist Proc

    7 Proc_start: T NAME1 '(' func_ops ')'
    8           | T NAME1 '(' T type_list ')'

    9 func_decl: Proc_start ';'

   10 type_list: %empty
   11          | type_list ',' T

   12 func_ops: %empty
   13         | single_decl func_ops_h

   14 func_ops_h: %empty
   15           | func_ops_h ',' single_decl

   16 Proc: Proc_start '{' Global ProcBody '}'

   17 ProcBody: %empty
   18         | ProcBody sequence

   19 print_stmt: PRINT Variable ';'

   20 return_stmt: RETURN E ';'
   21            | RETURN ';'

   22 func_call: NAME1 '(' actual_params ')'

   23 sequence: '{' ProcBody '}'
   24         | AssignExp
   25         | selection_stmt
   26         | iteration_stmt
   27         | print_stmt
   28         | func_call ';'
   29         | return_stmt

   30 selection_stmt: IF '(' logical_expr ')' sequence ELSE sequence
   31               | IF '(' logical_expr ')' sequence

   32 iteration_stmt: WHILE '(' logical_expr ')' sequence
   33               | DO sequence WHILE '(' logical_expr ')' ';'

   34 conditional_expr: logical_expr '?' E ':' E

   35 rel_expr: E GREATER_THAN E
   36         | E GREATER_THAN_EQUAL E
   37         | E LESS_THAN E
   38         | E LESS_THAN_EQUAL E
   39         | E EQUAL E
   40         | E NOT_EQUAL E

   41 logical_expr: rel_expr
   42             | '(' logical_expr ')'
   43             | logical_expr AND logical_expr
   44             | logical_expr OR logical_expr
   45             | NOT logical_expr

   46 D: T L ';'
   47  | single_decl ';'

   48 actual_params: %empty
   49              | actual_params_h E

   50 actual_params_h: %empty
   51                | actual_params_h E ','

   52 single_decl: T NAME1

   53 T: INTEGER
   54  | FLOAT
   55  | VOID

   56 NAME1: NAME

   57 L: NAME1 ',' NAME1
   58  | L ',' NAME1

   59 Variable: NAME1

   60 Constant: INTEGER_NUMBER
   61         | DOUBLE_NUMBER

   62 AssignExp: Variable ASSIGN E ';'
   63          | Variable ASSIGN func_call ';'

   64 E: Constant
   65  | Variable
   66  | conditional_expr
   67  | '(' E ')'
   68  | E '+' E
   69  | E '-' E
   70  | E '/' E
   71  | E '*' E
   72  | '-' E


Terminals, with rules where they appear

$end (0) 0
'(' (40) 7 8 22 30 31 32 33 42 67
')' (41) 7 8 22 30 31 32 33 42 67
'*' (42) 71
'+' (43) 68
',' (44) 11 15 51 57 58
'-' (45) 69 72
'/' (47) 70
':' (58) 34
';' (59) 9 19 20 21 28 33 46 47 62 63
'?' (63) 34
'{' (123) 16 23
'}' (125) 16 23
error (256)
INTEGER_NUMBER (258) 60
BBNUM (259)
INTEGER (260) 53
DOUBLE_NUMBER (261) 61
NAME (262) 56
RETURN (263) 20 21
FLOAT (264) 54
ASSIGN (265) 62 63
VOID (266) 55
UMINUS (267)
WHILE (268) 32 33
IF (269) 30 31
ELSE (270) 30
DO (271) 33
GREATER_THAN (272) 35
GREATER_THAN_EQUAL (273) 36
LESS_THAN (274) 37
LESS_THAN_EQUAL (275) 38
EQUAL (276) 39
NOT_EQUAL (277) 40
AND (278) 43
OR (279) 44
NOT (280) 45
PRINT (281) 19
IFST (282)


Nonterminals, with rules where they appear

$accept (40)
    on left: 0
Prog (41)
    on left: 1, on right: 0
Global (42)
    on left: 2 3 4, on right: 1 3 4 16
Proclist (43)
    on left: 5 6, on right: 1 6
Proc_start (44)
    on left: 7 8, on right: 9 16
func_decl (45)
    on left: 9, on right: 4
type_list (46)
    on left: 10 11, on right: 8 11
func_ops (47)
    on left: 12 13, on right: 7
func_ops_h (48)
    on left: 14 15, on right: 13 15
Proc (49)
    on left: 16, on right: 5 6
ProcBody (50)
    on left: 17 18, on right: 16 18 23
print_stmt (51)
    on left: 19, on right: 27
return_stmt (52)
    on left: 20 21, on right: 29
func_call (53)
    on left: 22, on right: 28 63
sequence (54)
    on left: 23 24 25 26 27 28 29, on right: 18 30 31 32 33
selection_stmt (55)
    on left: 30 31, on right: 25
iteration_stmt (56)
    on left: 32 33, on right: 26
conditional_expr (57)
    on left: 34, on right: 66
rel_expr (58)
    on left: 35 36 37 38 39 40, on right: 41
logical_expr (59)
    on left: 41 42 43 44 45, on right: 30 31 32 33 34 42 43 44 45
D (60)
    on left: 46 47, on right: 3
actual_params (61)
    on left: 48 49, on right: 22
actual_params_h (62)
    on left: 50 51, on right: 49 51
single_decl (63)
    on left: 52, on right: 13 15 47
T (64)
    on left: 53 54 55, on right: 7 8 11 46 52
NAME1 (65)
    on left: 56, on right: 7 8 22 52 57 58 59
L (66)
    on left: 57 58, on right: 46 58
Variable (67)
    on left: 59, on right: 19 62 63 65
Constant (68)
    on left: 60 61, on right: 64
AssignExp (69)
    on left: 62 63, on right: 24
E (70)
    on left: 64 65 66 67 68 69 70 71 72, on right: 20 34 35 36 37 38
    39 40 49 51 62 67 68 69 70 71 72


State 0

    0 $accept: . Prog $end

    $default  reduce using rule 2 (Global)

    Prog    go to state 1
    Global  go to state 2


State 1

    0 $accept: Prog . $end

    $end  shift, and go to state 3


State 2

    1 Prog: Global . Proclist
    3 Global: Global . D
    4       | Global . func_decl

    INTEGER  shift, and go to state 4
    FLOAT    shift, and go to state 5
    VOID     shift, and go to state 6

    Proclist     go to state 7
    Proc_start   go to state 8
    func_decl    go to state 9
    Proc         go to state 10
    D            go to state 11
    single_decl  go to state 12
    T            go to state 13


State 3

    0 $accept: Prog $end .

    $default  accept


State 4

   53 T: INTEGER .

    $default  reduce using rule 53 (T)


State 5

   54 T: FLOAT .

    $default  reduce using rule 54 (T)


State 6

   55 T: VOID .

    $default  reduce using rule 55 (T)


State 7

    1 Prog: Global Proclist .
    6 Proclist: Proclist . Proc

    INTEGER  shift, and go to state 4
    FLOAT    shift, and go to state 5
    VOID     shift, and go to state 6

    $default  reduce using rule 1 (Prog)

    Proc_start  go to state 14
    Proc        go to state 15
    T           go to state 16


State 8

    9 func_decl: Proc_start . ';'
   16 Proc: Proc_start . '{' Global ProcBody '}'

    ';'  shift, and go to state 17
    '{'  shift, and go to state 18


State 9

    4 Global: Global func_decl .

    $default  reduce using rule 4 (Global)


State 10

    5 Proclist: Proc .

    $default  reduce using rule 5 (Proclist)


State 11

    3 Global: Global D .

    $default  reduce using rule 3 (Global)


State 12

   47 D: single_decl . ';'

    ';'  shift, and go to state 19


State 13

    7 Proc_start: T . NAME1 '(' func_ops ')'
    8           | T . NAME1 '(' T type_list ')'
   46 D: T . L ';'
   52 single_decl: T . NAME1

    NAME  shift, and go to state 20

    NAME1  go to state 21
    L      go to state 22


State 14

   16 Proc: Proc_start . '{' Global ProcBody '}'

    '{'  shift, and go to state 18


State 15

    6 Proclist: Proclist Proc .

    $default  reduce using rule 6 (Proclist)


State 16

    7 Proc_start: T . NAME1 '(' func_ops ')'
    8           | T . NAME1 '(' T type_list ')'

    NAME  shift, and go to state 20

    NAME1  go to state 23


State 17

    9 func_decl: Proc_start ';' .

    $default  reduce using rule 9 (func_decl)


State 18

   16 Proc: Proc_start '{' . Global ProcBody '}'

    $default  reduce using rule 2 (Global)

    Global  go to state 24


State 19

   47 D: single_decl ';' .

    $default  reduce using rule 47 (D)


State 20

   56 NAME1: NAME .

    $default  reduce using rule 56 (NAME1)


State 21

    7 Proc_start: T NAME1 . '(' func_ops ')'
    8           | T NAME1 . '(' T type_list ')'
   52 single_decl: T NAME1 .
   57 L: NAME1 . ',' NAME1

    '('  shift, and go to state 25
    ','  shift, and go to state 26

    $default  reduce using rule 52 (single_decl)


State 22

   46 D: T L . ';'
   58 L: L . ',' NAME1

    ';'  shift, and go to state 27
    ','  shift, and go to state 28


State 23

    7 Proc_start: T NAME1 . '(' func_ops ')'
    8           | T NAME1 . '(' T type_list ')'

    '('  shift, and go to state 25


State 24

    3 Global: Global . D
    4       | Global . func_decl
   16 Proc: Proc_start '{' Global . ProcBody '}'

    INTEGER  shift, and go to state 4
    FLOAT    shift, and go to state 5
    VOID     shift, and go to state 6

    $default  reduce using rule 17 (ProcBody)

    Proc_start   go to state 29
    func_decl    go to state 9
    ProcBody     go to state 30
    D            go to state 11
    single_decl  go to state 12
    T            go to state 13


State 25

    7 Proc_start: T NAME1 '(' . func_ops ')'
    8           | T NAME1 '(' . T type_list ')'

    INTEGER  shift, and go to state 4
    FLOAT    shift, and go to state 5
    VOID     shift, and go to state 6

    $default  reduce using rule 12 (func_ops)

    func_ops     go to state 31
    single_decl  go to state 32
    T            go to state 33


State 26

   57 L: NAME1 ',' . NAME1

    NAME  shift, and go to state 20

    NAME1  go to state 34


State 27

   46 D: T L ';' .

    $default  reduce using rule 46 (D)


State 28

   58 L: L ',' . NAME1

    NAME  shift, and go to state 20

    NAME1  go to state 35


State 29

    9 func_decl: Proc_start . ';'

    ';'  shift, and go to state 17


State 30

   16 Proc: Proc_start '{' Global ProcBody . '}'
   18 ProcBody: ProcBody . sequence

    NAME    shift, and go to state 20
    RETURN  shift, and go to state 36
    WHILE   shift, and go to state 37
    IF      shift, and go to state 38
    DO      shift, and go to state 39
    PRINT   shift, and go to state 40
    '{'     shift, and go to state 41
    '}'     shift, and go to state 42

    print_stmt      go to state 43
    return_stmt     go to state 44
    func_call       go to state 45
    sequence        go to state 46
    selection_stmt  go to state 47
    iteration_stmt  go to state 48
    NAME1           go to state 49
    Variable        go to state 50
    AssignExp       go to state 51


State 31

    7 Proc_start: T NAME1 '(' func_ops . ')'

    ')'  shift, and go to state 52


State 32

   13 func_ops: single_decl . func_ops_h

    $default  reduce using rule 14 (func_ops_h)

    func_ops_h  go to state 53


State 33

    8 Proc_start: T NAME1 '(' T . type_list ')'
   52 single_decl: T . NAME1

    NAME  shift, and go to state 20

    $default  reduce using rule 10 (type_list)

    type_list  go to state 54
    NAME1      go to state 55


State 34

   57 L: NAME1 ',' NAME1 .

    $default  reduce using rule 57 (L)


State 35

   58 L: L ',' NAME1 .

    $default  reduce using rule 58 (L)


State 36

   20 return_stmt: RETURN . E ';'
   21            | RETURN . ';'

    INTEGER_NUMBER  shift, and go to state 56
    DOUBLE_NUMBER   shift, and go to state 57
    NAME            shift, and go to state 20
    NOT             shift, and go to state 58
    '-'             shift, and go to state 59
    '('             shift, and go to state 60
    ';'             shift, and go to state 61

    conditional_expr  go to state 62
    rel_expr          go to state 63
    logical_expr      go to state 64
    NAME1             go to state 65
    Variable          go to state 66
    Constant          go to state 67
    E                 go to state 68


State 37

   32 iteration_stmt: WHILE . '(' logical_expr ')' sequence

    '('  shift, and go to state 69


State 38

   30 selection_stmt: IF . '(' logical_expr ')' sequence ELSE sequence
   31               | IF . '(' logical_expr ')' sequence

    '('  shift, and go to state 70


State 39

   33 iteration_stmt: DO . sequence WHILE '(' logical_expr ')' ';'

    NAME    shift, and go to state 20
    RETURN  shift, and go to state 36
    WHILE   shift, and go to state 37
    IF      shift, and go to state 38
    DO      shift, and go to state 39
    PRINT   shift, and go to state 40
    '{'     shift, and go to state 41

    print_stmt      go to state 43
    return_stmt     go to state 44
    func_call       go to state 45
    sequence        go to state 71
    selection_stmt  go to state 47
    iteration_stmt  go to state 48
    NAME1           go to state 49
    Variable        go to state 50
    AssignExp       go to state 51


State 40

   19 print_stmt: PRINT . Variable ';'

    NAME  shift, and go to state 20

    NAME1     go to state 65
    Variable  go to state 72


State 41

   23 sequence: '{' . ProcBody '}'

    $default  reduce using rule 17 (ProcBody)

    ProcBody  go to state 73


State 42

   16 Proc: Proc_start '{' Global ProcBody '}' .

    $default  reduce using rule 16 (Proc)


State 43

   27 sequence: print_stmt .

    $default  reduce using rule 27 (sequence)


State 44

   29 sequence: return_stmt .

    $default  reduce using rule 29 (sequence)


State 45

   28 sequence: func_call . ';'

    ';'  shift, and go to state 74


State 46

   18 ProcBody: ProcBody sequence .

    $default  reduce using rule 18 (ProcBody)


State 47

   25 sequence: selection_stmt .

    $default  reduce using rule 25 (sequence)


State 48

   26 sequence: iteration_stmt .

    $default  reduce using rule 26 (sequence)


State 49

   22 func_call: NAME1 . '(' actual_params ')'
   59 Variable: NAME1 .

    '('  shift, and go to state 75

    $default  reduce using rule 59 (Variable)


State 50

   62 AssignExp: Variable . ASSIGN E ';'
   63          | Variable . ASSIGN func_call ';'

    ASSIGN  shift, and go to state 76


State 51

   24 sequence: AssignExp .

    $default  reduce using rule 24 (sequence)


State 52

    7 Proc_start: T NAME1 '(' func_ops ')' .

    $default  reduce using rule 7 (Proc_start)


State 53

   13 func_ops: single_decl func_ops_h .
   15 func_ops_h: func_ops_h . ',' single_decl

    ','  shift, and go to state 77

    $default  reduce using rule 13 (func_ops)


State 54

    8 Proc_start: T NAME1 '(' T type_list . ')'
   11 type_list: type_list . ',' T

    ')'  shift, and go to state 78
    ','  shift, and go to state 79


State 55

   52 single_decl: T NAME1 .

    $default  reduce using rule 52 (single_decl)


State 56

   60 Constant: INTEGER_NUMBER .

    $default  reduce using rule 60 (Constant)


State 57

   61 Constant: DOUBLE_NUMBER .

    $default  reduce using rule 61 (Constant)


State 58

   45 logical_expr: NOT . logical_expr

    INTEGER_NUMBER  shift, and go to state 56
    DOUBLE_NUMBER   shift, and go to state 57
    NAME            shift, and go to state 20
    NOT             shift, and go to state 58
    '-'             shift, and go to state 59
    '('             shift, and go to state 60

    conditional_expr  go to state 62
    rel_expr          go to state 63
    logical_expr      go to state 80
    NAME1             go to state 65
    Variable          go to state 66
    Constant          go to state 67
    E                 go to state 81


State 59

   72 E: '-' . E

    INTEGER_NUMBER  shift, and go to state 56
    DOUBLE_NUMBER   shift, and go to state 57
    NAME            shift, and go to state 20
    NOT             shift, and go to state 58
    '-'             shift, and go to state 59
    '('             shift, and go to state 60

    conditional_expr  go to state 62
    rel_expr          go to state 63
    logical_expr      go to state 64
    NAME1             go to state 65
    Variable          go to state 66
    Constant          go to state 67
    E                 go to state 82


State 60

   42 logical_expr: '(' . logical_expr ')'
   67 E: '(' . E ')'

    INTEGER_NUMBER  shift, and go to state 56
    DOUBLE_NUMBER   shift, and go to state 57
    NAME            shift, and go to state 20
    NOT             shift, and go to state 58
    '-'             shift, and go to state 59
    '('             shift, and go to state 60

    conditional_expr  go to state 62
    rel_expr          go to state 63
    logical_expr      go to state 83
    NAME1             go to state 65
    Variable          go to state 66
    Constant          go to state 67
    E                 go to state 84


State 61

   21 return_stmt: RETURN ';' .

    $default  reduce using rule 21 (return_stmt)


State 62

   66 E: conditional_expr .

    $default  reduce using rule 66 (E)


State 63

   41 logical_expr: rel_expr .

    $default  reduce using rule 41 (logical_expr)


State 64

   34 conditional_expr: logical_expr . '?' E ':' E
   43 logical_expr: logical_expr . AND logical_expr
   44             | logical_expr . OR logical_expr

    AND  shift, and go to state 85
    OR   shift, and go to state 86
    '?'  shift, and go to state 87


State 65

   59 Variable: NAME1 .

    $default  reduce using rule 59 (Variable)


State 66

   65 E: Variable .

    $default  reduce using rule 65 (E)


State 67

   64 E: Constant .

    $default  reduce using rule 64 (E)


State 68

   20 return_stmt: RETURN E . ';'
   35 rel_expr: E . GREATER_THAN E
   36         | E . GREATER_THAN_EQUAL E
   37         | E . LESS_THAN E
   38         | E . LESS_THAN_EQUAL E
   39         | E . EQUAL E
   40         | E . NOT_EQUAL E
   68 E: E . '+' E
   69  | E . '-' E
   70  | E . '/' E
   71  | E . '*' E

    GREATER_THAN        shift, and go to state 88
    GREATER_THAN_EQUAL  shift, and go to state 89
    LESS_THAN           shift, and go to state 90
    LESS_THAN_EQUAL     shift, and go to state 91
    EQUAL               shift, and go to state 92
    NOT_EQUAL           shift, and go to state 93
    '+'                 shift, and go to state 94
    '-'                 shift, and go to state 95
    '*'                 shift, and go to state 96
    '/'                 shift, and go to state 97
    ';'                 shift, and go to state 98


State 69

   32 iteration_stmt: WHILE '(' . logical_expr ')' sequence

    INTEGER_NUMBER  shift, and go to state 56
    DOUBLE_NUMBER   shift, and go to state 57
    NAME            shift, and go to state 20
    NOT             shift, and go to state 58
    '-'             shift, and go to state 59
    '('             shift, and go to state 60

    conditional_expr  go to state 62
    rel_expr          go to state 63
    logical_expr      go to state 99
    NAME1             go to state 65
    Variable          go to state 66
    Constant          go to state 67
    E                 go to state 81


State 70

   30 selection_stmt: IF '(' . logical_expr ')' sequence ELSE sequence
   31               | IF '(' . logical_expr ')' sequence

    INTEGER_NUMBER  shift, and go to state 56
    DOUBLE_NUMBER   shift, and go to state 57
    NAME            shift, and go to state 20
    NOT             shift, and go to state 58
    '-'             shift, and go to state 59
    '('             shift, and go to state 60

    conditional_expr  go to state 62
    rel_expr          go to state 63
    logical_expr      go to state 100
    NAME1             go to state 65
    Variable          go to state 66
    Constant          go to state 67
    E                 go to state 81


State 71

   33 iteration_stmt: DO sequence . WHILE '(' logical_expr ')' ';'

    WHILE  shift, and go to state 101


State 72

   19 print_stmt: PRINT Variable . ';'

    ';'  shift, and go to state 102


State 73

   18 ProcBody: ProcBody . sequence
   23 sequence: '{' ProcBody . '}'

    NAME    shift, and go to state 20
    RETURN  shift, and go to state 36
    WHILE   shift, and go to state 37
    IF      shift, and go to state 38
    DO      shift, and go to state 39
    PRINT   shift, and go to state 40
    '{'     shift, and go to state 41
    '}'     shift, and go to state 103

    print_stmt      go to state 43
    return_stmt     go to state 44
    func_call       go to state 45
    sequence        go to state 46
    selection_stmt  go to state 47
    iteration_stmt  go to state 48
    NAME1           go to state 49
    Variable        go to state 50
    AssignExp       go to state 51


State 74

   28 sequence: func_call ';' .

    $default  reduce using rule 28 (sequence)


State 75

   22 func_call: NAME1 '(' . actual_params ')'

    ')'       reduce using rule 48 (actual_params)
    $default  reduce using rule 50 (actual_params_h)

    actual_params    go to state 104
    actual_params_h  go to state 105


State 76

   62 AssignExp: Variable ASSIGN . E ';'
   63          | Variable ASSIGN . func_call ';'

    INTEGER_NUMBER  shift, and go to state 56
    DOUBLE_NUMBER   shift, and go to state 57
    NAME            shift, and go to state 20
    NOT             shift, and go to state 58
    '-'             shift, and go to state 59
    '('             shift, and go to state 60

    func_call         go to state 106
    conditional_expr  go to state 62
    rel_expr          go to state 63
    logical_expr      go to state 64
    NAME1             go to state 49
    Variable          go to state 66
    Constant          go to state 67
    E                 go to state 107


State 77

   15 func_ops_h: func_ops_h ',' . single_decl

    INTEGER  shift, and go to state 4
    FLOAT    shift, and go to state 5
    VOID     shift, and go to state 6

    single_decl  go to state 108
    T            go to state 109


State 78

    8 Proc_start: T NAME1 '(' T type_list ')' .

    $default  reduce using rule 8 (Proc_start)


State 79

   11 type_list: type_list ',' . T

    INTEGER  shift, and go to state 4
    FLOAT    shift, and go to state 5
    VOID     shift, and go to state 6

    T  go to state 110


State 80

   34 conditional_expr: logical_expr . '?' E ':' E
   43 logical_expr: logical_expr . AND logical_expr
   44             | logical_expr . OR logical_expr
   45             | NOT logical_expr .

    $default  reduce using rule 45 (logical_expr)


State 81

   35 rel_expr: E . GREATER_THAN E
   36         | E . GREATER_THAN_EQUAL E
   37         | E . LESS_THAN E
   38         | E . LESS_THAN_EQUAL E
   39         | E . EQUAL E
   40         | E . NOT_EQUAL E
   68 E: E . '+' E
   69  | E . '-' E
   70  | E . '/' E
   71  | E . '*' E

    GREATER_THAN        shift, and go to state 88
    GREATER_THAN_EQUAL  shift, and go to state 89
    LESS_THAN           shift, and go to state 90
    LESS_THAN_EQUAL     shift, and go to state 91
    EQUAL               shift, and go to state 92
    NOT_EQUAL           shift, and go to state 93
    '+'                 shift, and go to state 94
    '-'                 shift, and go to state 95
    '*'                 shift, and go to state 96
    '/'                 shift, and go to state 97


State 82

   35 rel_expr: E . GREATER_THAN E
   36         | E . GREATER_THAN_EQUAL E
   37         | E . LESS_THAN E
   38         | E . LESS_THAN_EQUAL E
   39         | E . EQUAL E
   40         | E . NOT_EQUAL E
   68 E: E . '+' E
   69  | E . '-' E
   70  | E . '/' E
   71  | E . '*' E
   72  | '-' E .

    $default  reduce using rule 72 (E)


State 83

   34 conditional_expr: logical_expr . '?' E ':' E
   42 logical_expr: '(' logical_expr . ')'
   43             | logical_expr . AND logical_expr
   44             | logical_expr . OR logical_expr

    AND  shift, and go to state 85
    OR   shift, and go to state 86
    '?'  shift, and go to state 87
    ')'  shift, and go to state 111


State 84

   35 rel_expr: E . GREATER_THAN E
   36         | E . GREATER_THAN_EQUAL E
   37         | E . LESS_THAN E
   38         | E . LESS_THAN_EQUAL E
   39         | E . EQUAL E
   40         | E . NOT_EQUAL E
   67 E: '(' E . ')'
   68  | E . '+' E
   69  | E . '-' E
   70  | E . '/' E
   71  | E . '*' E

    GREATER_THAN        shift, and go to state 88
    GREATER_THAN_EQUAL  shift, and go to state 89
    LESS_THAN           shift, and go to state 90
    LESS_THAN_EQUAL     shift, and go to state 91
    EQUAL               shift, and go to state 92
    NOT_EQUAL           shift, and go to state 93
    '+'                 shift, and go to state 94
    '-'                 shift, and go to state 95
    '*'                 shift, and go to state 96
    '/'                 shift, and go to state 97
    ')'                 shift, and go to state 112


State 85

   43 logical_expr: logical_expr AND . logical_expr

    INTEGER_NUMBER  shift, and go to state 56
    DOUBLE_NUMBER   shift, and go to state 57
    NAME            shift, and go to state 20
    NOT             shift, and go to state 58
    '-'             shift, and go to state 59
    '('             shift, and go to state 60

    conditional_expr  go to state 62
    rel_expr          go to state 63
    logical_expr      go to state 113
    NAME1             go to state 65
    Variable          go to state 66
    Constant          go to state 67
    E                 go to state 81


State 86

   44 logical_expr: logical_expr OR . logical_expr

    INTEGER_NUMBER  shift, and go to state 56
    DOUBLE_NUMBER   shift, and go to state 57
    NAME            shift, and go to state 20
    NOT             shift, and go to state 58
    '-'             shift, and go to state 59
    '('             shift, and go to state 60

    conditional_expr  go to state 62
    rel_expr          go to state 63
    logical_expr      go to state 114
    NAME1             go to state 65
    Variable          go to state 66
    Constant          go to state 67
    E                 go to state 81


State 87

   34 conditional_expr: logical_expr '?' . E ':' E

    INTEGER_NUMBER  shift, and go to state 56
    DOUBLE_NUMBER   shift, and go to state 57
    NAME            shift, and go to state 20
    NOT             shift, and go to state 58
    '-'             shift, and go to state 59
    '('             shift, and go to state 60

    conditional_expr  go to state 62
    rel_expr          go to state 63
    logical_expr      go to state 64
    NAME1             go to state 65
    Variable          go to state 66
    Constant          go to state 67
    E                 go to state 115


State 88

   35 rel_expr: E GREATER_THAN . E

    INTEGER_NUMBER  shift, and go to state 56
    DOUBLE_NUMBER   shift, and go to state 57
    NAME            shift, and go to state 20
    NOT             shift, and go to state 58
    '-'             shift, and go to state 59
    '('             shift, and go to state 60

    conditional_expr  go to state 62
    rel_expr          go to state 63
    logical_expr      go to state 64
    NAME1             go to state 65
    Variable          go to state 66
    Constant          go to state 67
    E                 go to state 116


State 89

   36 rel_expr: E GREATER_THAN_EQUAL . E

    INTEGER_NUMBER  shift, and go to state 56
    DOUBLE_NUMBER   shift, and go to state 57
    NAME            shift, and go to state 20
    NOT             shift, and go to state 58
    '-'             shift, and go to state 59
    '('             shift, and go to state 60

    conditional_expr  go to state 62
    rel_expr          go to state 63
    logical_expr      go to state 64
    NAME1             go to state 65
    Variable          go to state 66
    Constant          go to state 67
    E                 go to state 117


State 90

   37 rel_expr: E LESS_THAN . E

    INTEGER_NUMBER  shift, and go to state 56
    DOUBLE_NUMBER   shift, and go to state 57
    NAME            shift, and go to state 20
    NOT             shift, and go to state 58
    '-'             shift, and go to state 59
    '('             shift, and go to state 60

    conditional_expr  go to state 62
    rel_expr          go to state 63
    logical_expr      go to state 64
    NAME1             go to state 65
    Variable          go to state 66
    Constant          go to state 67
    E                 go to state 118


State 91

   38 rel_expr: E LESS_THAN_EQUAL . E

    INTEGER_NUMBER  shift, and go to state 56
    DOUBLE_NUMBER   shift, and go to state 57
    NAME            shift, and go to state 20
    NOT             shift, and go to state 58
    '-'             shift, and go to state 59
    '('             shift, and go to state 60

    conditional_expr  go to state 62
    rel_expr          go to state 63
    logical_expr      go to state 64
    NAME1             go to state 65
    Variable          go to state 66
    Constant          go to state 67
    E                 go to state 119


State 92

   39 rel_expr: E EQUAL . E

    INTEGER_NUMBER  shift, and go to state 56
    DOUBLE_NUMBER   shift, and go to state 57
    NAME            shift, and go to state 20
    NOT             shift, and go to state 58
    '-'             shift, and go to state 59
    '('             shift, and go to state 60

    conditional_expr  go to state 62
    rel_expr          go to state 63
    logical_expr      go to state 64
    NAME1             go to state 65
    Variable          go to state 66
    Constant          go to state 67
    E                 go to state 120


State 93

   40 rel_expr: E NOT_EQUAL . E

    INTEGER_NUMBER  shift, and go to state 56
    DOUBLE_NUMBER   shift, and go to state 57
    NAME            shift, and go to state 20
    NOT             shift, and go to state 58
    '-'             shift, and go to state 59
    '('             shift, and go to state 60

    conditional_expr  go to state 62
    rel_expr          go to state 63
    logical_expr      go to state 64
    NAME1             go to state 65
    Variable          go to state 66
    Constant          go to state 67
    E                 go to state 121


State 94

   68 E: E '+' . E

    INTEGER_NUMBER  shift, and go to state 56
    DOUBLE_NUMBER   shift, and go to state 57
    NAME            shift, and go to state 20
    NOT             shift, and go to state 58
    '-'             shift, and go to state 59
    '('             shift, and go to state 60

    conditional_expr  go to state 62
    rel_expr          go to state 63
    logical_expr      go to state 64
    NAME1             go to state 65
    Variable          go to state 66
    Constant          go to state 67
    E                 go to state 122


State 95

   69 E: E '-' . E

    INTEGER_NUMBER  shift, and go to state 56
    DOUBLE_NUMBER   shift, and go to state 57
    NAME            shift, and go to state 20
    NOT             shift, and go to state 58
    '-'             shift, and go to state 59
    '('             shift, and go to state 60

    conditional_expr  go to state 62
    rel_expr          go to state 63
    logical_expr      go to state 64
    NAME1             go to state 65
    Variable          go to state 66
    Constant          go to state 67
    E                 go to state 123


State 96

   71 E: E '*' . E

    INTEGER_NUMBER  shift, and go to state 56
    DOUBLE_NUMBER   shift, and go to state 57
    NAME            shift, and go to state 20
    NOT             shift, and go to state 58
    '-'             shift, and go to state 59
    '('             shift, and go to state 60

    conditional_expr  go to state 62
    rel_expr          go to state 63
    logical_expr      go to state 64
    NAME1             go to state 65
    Variable          go to state 66
    Constant          go to state 67
    E                 go to state 124


State 97

   70 E: E '/' . E

    INTEGER_NUMBER  shift, and go to state 56
    DOUBLE_NUMBER   shift, and go to state 57
    NAME            shift, and go to state 20
    NOT             shift, and go to state 58
    '-'             shift, and go to state 59
    '('             shift, and go to state 60

    conditional_expr  go to state 62
    rel_expr          go to state 63
    logical_expr      go to state 64
    NAME1             go to state 65
    Variable          go to state 66
    Constant          go to state 67
    E                 go to state 125


State 98

   20 return_stmt: RETURN E ';' .

    $default  reduce using rule 20 (return_stmt)


State 99

   32 iteration_stmt: WHILE '(' logical_expr . ')' sequence
   34 conditional_expr: logical_expr . '?' E ':' E
   43 logical_expr: logical_expr . AND logical_expr
   44             | logical_expr . OR logical_expr

    AND  shift, and go to state 85
    OR   shift, and go to state 86
    '?'  shift, and go to state 87
    ')'  shift, and go to state 126


State 100

   30 selection_stmt: IF '(' logical_expr . ')' sequence ELSE sequence
   31               | IF '(' logical_expr . ')' sequence
   34 conditional_expr: logical_expr . '?' E ':' E
   43 logical_expr: logical_expr . AND logical_expr
   44             | logical_expr . OR logical_expr

    AND  shift, and go to state 85
    OR   shift, and go to state 86
    '?'  shift, and go to state 87
    ')'  shift, and go to state 127


State 101

   33 iteration_stmt: DO sequence WHILE . '(' logical_expr ')' ';'

    '('  shift, and go to state 128


State 102

   19 print_stmt: PRINT Variable ';' .

    $default  reduce using rule 19 (print_stmt)


State 103

   23 sequence: '{' ProcBody '}' .

    $default  reduce using rule 23 (sequence)


State 104

   22 func_call: NAME1 '(' actual_params . ')'

    ')'  shift, and go to state 129


State 105

   49 actual_params: actual_params_h . E
   51 actual_params_h: actual_params_h . E ','

    INTEGER_NUMBER  shift, and go to state 56
    DOUBLE_NUMBER   shift, and go to state 57
    NAME            shift, and go to state 20
    NOT             shift, and go to state 58
    '-'             shift, and go to state 59
    '('             shift, and go to state 60

    conditional_expr  go to state 62
    rel_expr          go to state 63
    logical_expr      go to state 64
    NAME1             go to state 65
    Variable          go to state 66
    Constant          go to state 67
    E                 go to state 130


State 106

   63 AssignExp: Variable ASSIGN func_call . ';'

    ';'  shift, and go to state 131


State 107

   35 rel_expr: E . GREATER_THAN E
   36         | E . GREATER_THAN_EQUAL E
   37         | E . LESS_THAN E
   38         | E . LESS_THAN_EQUAL E
   39         | E . EQUAL E
   40         | E . NOT_EQUAL E
   62 AssignExp: Variable ASSIGN E . ';'
   68 E: E . '+' E
   69  | E . '-' E
   70  | E . '/' E
   71  | E . '*' E

    GREATER_THAN        shift, and go to state 88
    GREATER_THAN_EQUAL  shift, and go to state 89
    LESS_THAN           shift, and go to state 90
    LESS_THAN_EQUAL     shift, and go to state 91
    EQUAL               shift, and go to state 92
    NOT_EQUAL           shift, and go to state 93
    '+'                 shift, and go to state 94
    '-'                 shift, and go to state 95
    '*'                 shift, and go to state 96
    '/'                 shift, and go to state 97
    ';'                 shift, and go to state 132


State 108

   15 func_ops_h: func_ops_h ',' single_decl .

    $default  reduce using rule 15 (func_ops_h)


State 109

   52 single_decl: T . NAME1

    NAME  shift, and go to state 20

    NAME1  go to state 55


State 110

   11 type_list: type_list ',' T .

    $default  reduce using rule 11 (type_list)


State 111

   42 logical_expr: '(' logical_expr ')' .

    $default  reduce using rule 42 (logical_expr)


State 112

   67 E: '(' E ')' .

    $default  reduce using rule 67 (E)


State 113

   34 conditional_expr: logical_expr . '?' E ':' E
   43 logical_expr: logical_expr . AND logical_expr
   43             | logical_expr AND logical_expr .
   44             | logical_expr . OR logical_expr

    $default  reduce using rule 43 (logical_expr)


State 114

   34 conditional_expr: logical_expr . '?' E ':' E
   43 logical_expr: logical_expr . AND logical_expr
   44             | logical_expr . OR logical_expr
   44             | logical_expr OR logical_expr .

    $default  reduce using rule 44 (logical_expr)


State 115

   34 conditional_expr: logical_expr '?' E . ':' E
   35 rel_expr: E . GREATER_THAN E
   36         | E . GREATER_THAN_EQUAL E
   37         | E . LESS_THAN E
   38         | E . LESS_THAN_EQUAL E
   39         | E . EQUAL E
   40         | E . NOT_EQUAL E
   68 E: E . '+' E
   69  | E . '-' E
   70  | E . '/' E
   71  | E . '*' E

    GREATER_THAN        shift, and go to state 88
    GREATER_THAN_EQUAL  shift, and go to state 89
    LESS_THAN           shift, and go to state 90
    LESS_THAN_EQUAL     shift, and go to state 91
    EQUAL               shift, and go to state 92
    NOT_EQUAL           shift, and go to state 93
    ':'                 shift, and go to state 133
    '+'                 shift, and go to state 94
    '-'                 shift, and go to state 95
    '*'                 shift, and go to state 96
    '/'                 shift, and go to state 97


State 116

   35 rel_expr: E . GREATER_THAN E
   35         | E GREATER_THAN E .
   36         | E . GREATER_THAN_EQUAL E
   37         | E . LESS_THAN E
   38         | E . LESS_THAN_EQUAL E
   39         | E . EQUAL E
   40         | E . NOT_EQUAL E
   68 E: E . '+' E
   69  | E . '-' E
   70  | E . '/' E
   71  | E . '*' E

    GREATER_THAN        shift, and go to state 88
    GREATER_THAN_EQUAL  shift, and go to state 89
    LESS_THAN           shift, and go to state 90
    LESS_THAN_EQUAL     shift, and go to state 91
    EQUAL               shift, and go to state 92
    NOT_EQUAL           shift, and go to state 93
    '+'                 shift, and go to state 94
    '-'                 shift, and go to state 95
    '*'                 shift, and go to state 96
    '/'                 shift, and go to state 97

    $default  reduce using rule 35 (rel_expr)


State 117

   35 rel_expr: E . GREATER_THAN E
   36         | E . GREATER_THAN_EQUAL E
   36         | E GREATER_THAN_EQUAL E .
   37         | E . LESS_THAN E
   38         | E . LESS_THAN_EQUAL E
   39         | E . EQUAL E
   40         | E . NOT_EQUAL E
   68 E: E . '+' E
   69  | E . '-' E
   70  | E . '/' E
   71  | E . '*' E

    GREATER_THAN        shift, and go to state 88
    GREATER_THAN_EQUAL  shift, and go to state 89
    LESS_THAN           shift, and go to state 90
    LESS_THAN_EQUAL     shift, and go to state 91
    EQUAL               shift, and go to state 92
    NOT_EQUAL           shift, and go to state 93
    '+'                 shift, and go to state 94
    '-'                 shift, and go to state 95
    '*'                 shift, and go to state 96
    '/'                 shift, and go to state 97

    $default  reduce using rule 36 (rel_expr)


State 118

   35 rel_expr: E . GREATER_THAN E
   36         | E . GREATER_THAN_EQUAL E
   37         | E . LESS_THAN E
   37         | E LESS_THAN E .
   38         | E . LESS_THAN_EQUAL E
   39         | E . EQUAL E
   40         | E . NOT_EQUAL E
   68 E: E . '+' E
   69  | E . '-' E
   70  | E . '/' E
   71  | E . '*' E

    GREATER_THAN        shift, and go to state 88
    GREATER_THAN_EQUAL  shift, and go to state 89
    LESS_THAN           shift, and go to state 90
    LESS_THAN_EQUAL     shift, and go to state 91
    EQUAL               shift, and go to state 92
    NOT_EQUAL           shift, and go to state 93
    '+'                 shift, and go to state 94
    '-'                 shift, and go to state 95
    '*'                 shift, and go to state 96
    '/'                 shift, and go to state 97

    $default  reduce using rule 37 (rel_expr)


State 119

   35 rel_expr: E . GREATER_THAN E
   36         | E . GREATER_THAN_EQUAL E
   37         | E . LESS_THAN E
   38         | E . LESS_THAN_EQUAL E
   38         | E LESS_THAN_EQUAL E .
   39         | E . EQUAL E
   40         | E . NOT_EQUAL E
   68 E: E . '+' E
   69  | E . '-' E
   70  | E . '/' E
   71  | E . '*' E

    GREATER_THAN        shift, and go to state 88
    GREATER_THAN_EQUAL  shift, and go to state 89
    LESS_THAN           shift, and go to state 90
    LESS_THAN_EQUAL     shift, and go to state 91
    EQUAL               shift, and go to state 92
    NOT_EQUAL           shift, and go to state 93
    '+'                 shift, and go to state 94
    '-'                 shift, and go to state 95
    '*'                 shift, and go to state 96
    '/'                 shift, and go to state 97

    $default  reduce using rule 38 (rel_expr)


State 120

   35 rel_expr: E . GREATER_THAN E
   36         | E . GREATER_THAN_EQUAL E
   37         | E . LESS_THAN E
   38         | E . LESS_THAN_EQUAL E
   39         | E . EQUAL E
   39         | E EQUAL E .
   40         | E . NOT_EQUAL E
   68 E: E . '+' E
   69  | E . '-' E
   70  | E . '/' E
   71  | E . '*' E

    GREATER_THAN        shift, and go to state 88
    GREATER_THAN_EQUAL  shift, and go to state 89
    LESS_THAN           shift, and go to state 90
    LESS_THAN_EQUAL     shift, and go to state 91
    EQUAL               shift, and go to state 92
    NOT_EQUAL           shift, and go to state 93
    '+'                 shift, and go to state 94
    '-'                 shift, and go to state 95
    '*'                 shift, and go to state 96
    '/'                 shift, and go to state 97

    $default  reduce using rule 39 (rel_expr)


State 121

   35 rel_expr: E . GREATER_THAN E
   36         | E . GREATER_THAN_EQUAL E
   37         | E . LESS_THAN E
   38         | E . LESS_THAN_EQUAL E
   39         | E . EQUAL E
   40         | E . NOT_EQUAL E
   40         | E NOT_EQUAL E .
   68 E: E . '+' E
   69  | E . '-' E
   70  | E . '/' E
   71  | E . '*' E

    GREATER_THAN        shift, and go to state 88
    GREATER_THAN_EQUAL  shift, and go to state 89
    LESS_THAN           shift, and go to state 90
    LESS_THAN_EQUAL     shift, and go to state 91
    EQUAL               shift, and go to state 92
    NOT_EQUAL           shift, and go to state 93
    '+'                 shift, and go to state 94
    '-'                 shift, and go to state 95
    '*'                 shift, and go to state 96
    '/'                 shift, and go to state 97

    $default  reduce using rule 40 (rel_expr)


State 122

   35 rel_expr: E . GREATER_THAN E
   36         | E . GREATER_THAN_EQUAL E
   37         | E . LESS_THAN E
   38         | E . LESS_THAN_EQUAL E
   39         | E . EQUAL E
   40         | E . NOT_EQUAL E
   68 E: E . '+' E
   68  | E '+' E .
   69  | E . '-' E
   70  | E . '/' E
   71  | E . '*' E

    '*'  shift, and go to state 96
    '/'  shift, and go to state 97

    $default  reduce using rule 68 (E)


State 123

   35 rel_expr: E . GREATER_THAN E
   36         | E . GREATER_THAN_EQUAL E
   37         | E . LESS_THAN E
   38         | E . LESS_THAN_EQUAL E
   39         | E . EQUAL E
   40         | E . NOT_EQUAL E
   68 E: E . '+' E
   69  | E . '-' E
   69  | E '-' E .
   70  | E . '/' E
   71  | E . '*' E

    '*'  shift, and go to state 96
    '/'  shift, and go to state 97

    $default  reduce using rule 69 (E)


State 124

   35 rel_expr: E . GREATER_THAN E
   36         | E . GREATER_THAN_EQUAL E
   37         | E . LESS_THAN E
   38         | E . LESS_THAN_EQUAL E
   39         | E . EQUAL E
   40         | E . NOT_EQUAL E
   68 E: E . '+' E
   69  | E . '-' E
   70  | E . '/' E
   71  | E . '*' E
   71  | E '*' E .

    $default  reduce using rule 71 (E)


State 125

   35 rel_expr: E . GREATER_THAN E
   36         | E . GREATER_THAN_EQUAL E
   37         | E . LESS_THAN E
   38         | E . LESS_THAN_EQUAL E
   39         | E . EQUAL E
   40         | E . NOT_EQUAL E
   68 E: E . '+' E
   69  | E . '-' E
   70  | E . '/' E
   70  | E '/' E .
   71  | E . '*' E

    $default  reduce using rule 70 (E)


State 126

   32 iteration_stmt: WHILE '(' logical_expr ')' . sequence

    NAME    shift, and go to state 20
    RETURN  shift, and go to state 36
    WHILE   shift, and go to state 37
    IF      shift, and go to state 38
    DO      shift, and go to state 39
    PRINT   shift, and go to state 40
    '{'     shift, and go to state 41

    print_stmt      go to state 43
    return_stmt     go to state 44
    func_call       go to state 45
    sequence        go to state 134
    selection_stmt  go to state 47
    iteration_stmt  go to state 48
    NAME1           go to state 49
    Variable        go to state 50
    AssignExp       go to state 51


State 127

   30 selection_stmt: IF '(' logical_expr ')' . sequence ELSE sequence
   31               | IF '(' logical_expr ')' . sequence

    NAME    shift, and go to state 20
    RETURN  shift, and go to state 36
    WHILE   shift, and go to state 37
    IF      shift, and go to state 38
    DO      shift, and go to state 39
    PRINT   shift, and go to state 40
    '{'     shift, and go to state 41

    print_stmt      go to state 43
    return_stmt     go to state 44
    func_call       go to state 45
    sequence        go to state 135
    selection_stmt  go to state 47
    iteration_stmt  go to state 48
    NAME1           go to state 49
    Variable        go to state 50
    AssignExp       go to state 51


State 128

   33 iteration_stmt: DO sequence WHILE '(' . logical_expr ')' ';'

    INTEGER_NUMBER  shift, and go to state 56
    DOUBLE_NUMBER   shift, and go to state 57
    NAME            shift, and go to state 20
    NOT             shift, and go to state 58
    '-'             shift, and go to state 59
    '('             shift, and go to state 60

    conditional_expr  go to state 62
    rel_expr          go to state 63
    logical_expr      go to state 136
    NAME1             go to state 65
    Variable          go to state 66
    Constant          go to state 67
    E                 go to state 81


State 129

   22 func_call: NAME1 '(' actual_params ')' .

    $default  reduce using rule 22 (func_call)


State 130

   35 rel_expr: E . GREATER_THAN E
   36         | E . GREATER_THAN_EQUAL E
   37         | E . LESS_THAN E
   38         | E . LESS_THAN_EQUAL E
   39         | E . EQUAL E
   40         | E . NOT_EQUAL E
   49 actual_params: actual_params_h E .
   51 actual_params_h: actual_params_h E . ','
   68 E: E . '+' E
   69  | E . '-' E
   70  | E . '/' E
   71  | E . '*' E

    GREATER_THAN        shift, and go to state 88
    GREATER_THAN_EQUAL  shift, and go to state 89
    LESS_THAN           shift, and go to state 90
    LESS_THAN_EQUAL     shift, and go to state 91
    EQUAL               shift, and go to state 92
    NOT_EQUAL           shift, and go to state 93
    '+'                 shift, and go to state 94
    '-'                 shift, and go to state 95
    '*'                 shift, and go to state 96
    '/'                 shift, and go to state 97
    ','                 shift, and go to state 137

    $default  reduce using rule 49 (actual_params)


State 131

   63 AssignExp: Variable ASSIGN func_call ';' .

    $default  reduce using rule 63 (AssignExp)


State 132

   62 AssignExp: Variable ASSIGN E ';' .

    $default  reduce using rule 62 (AssignExp)


State 133

   34 conditional_expr: logical_expr '?' E ':' . E

    INTEGER_NUMBER  shift, and go to state 56
    DOUBLE_NUMBER   shift, and go to state 57
    NAME            shift, and go to state 20
    NOT             shift, and go to state 58
    '-'             shift, and go to state 59
    '('             shift, and go to state 60

    conditional_expr  go to state 62
    rel_expr          go to state 63
    logical_expr      go to state 64
    NAME1             go to state 65
    Variable          go to state 66
    Constant          go to state 67
    E                 go to state 138


State 134

   32 iteration_stmt: WHILE '(' logical_expr ')' sequence .

    $default  reduce using rule 32 (iteration_stmt)


State 135

   30 selection_stmt: IF '(' logical_expr ')' sequence . ELSE sequence
   31               | IF '(' logical_expr ')' sequence .

    ELSE  shift, and go to state 139

    $default  reduce using rule 31 (selection_stmt)


State 136

   33 iteration_stmt: DO sequence WHILE '(' logical_expr . ')' ';'
   34 conditional_expr: logical_expr . '?' E ':' E
   43 logical_expr: logical_expr . AND logical_expr
   44             | logical_expr . OR logical_expr

    AND  shift, and go to state 85
    OR   shift, and go to state 86
    '?'  shift, and go to state 87
    ')'  shift, and go to state 140


State 137

   51 actual_params_h: actual_params_h E ',' .

    $default  reduce using rule 51 (actual_params_h)


State 138

   34 conditional_expr: logical_expr '?' E ':' E .
   35 rel_expr: E . GREATER_THAN E
   36         | E . GREATER_THAN_EQUAL E
   37         | E . LESS_THAN E
   38         | E . LESS_THAN_EQUAL E
   39         | E . EQUAL E
   40         | E . NOT_EQUAL E
   68 E: E . '+' E
   69  | E . '-' E
   70  | E . '/' E
   71  | E . '*' E

    GREATER_THAN        shift, and go to state 88
    GREATER_THAN_EQUAL  shift, and go to state 89
    LESS_THAN           shift, and go to state 90
    LESS_THAN_EQUAL     shift, and go to state 91
    EQUAL               shift, and go to state 92
    NOT_EQUAL           shift, and go to state 93
    '+'                 shift, and go to state 94
    '-'                 shift, and go to state 95
    '*'                 shift, and go to state 96
    '/'                 shift, and go to state 97

    $default  reduce using rule 34 (conditional_expr)


State 139

   30 selection_stmt: IF '(' logical_expr ')' sequence ELSE . sequence

    NAME    shift, and go to state 20
    RETURN  shift, and go to state 36
    WHILE   shift, and go to state 37
    IF      shift, and go to state 38
    DO      shift, and go to state 39
    PRINT   shift, and go to state 40
    '{'     shift, and go to state 41

    print_stmt      go to state 43
    return_stmt     go to state 44
    func_call       go to state 45
    sequence        go to state 141
    selection_stmt  go to state 47
    iteration_stmt  go to state 48
    NAME1           go to state 49
    Variable        go to state 50
    AssignExp       go to state 51


State 140

   33 iteration_stmt: DO sequence WHILE '(' logical_expr ')' . ';'

    ';'  shift, and go to state 142


State 141

   30 selection_stmt: IF '(' logical_expr ')' sequence ELSE sequence .

    $default  reduce using rule 30 (selection_stmt)


State 142

   33 iteration_stmt: DO sequence WHILE '(' logical_expr ')' ';' .

    $default  reduce using rule 33 (iteration_stmt)
